{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Projects\\\\React Flask Library\\\\react-flask-library\\\\src\\\\Components\\\\BookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookForm = props => {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [selectedBook, setSelectedBook] = useState(null);\n  useEffect(() => {\n    fetch(\"/api/books/\").then(response => response.json()).then(data => {\n      setBooks(data.items);\n    });\n  }, []);\n  setSelectedBook(props.selectedBook);\n\n  const saveNewBook = event => {\n    event.preventDefault();\n    const book = {\n      title,\n      author,\n      description\n    };\n    fetch(\"api/books/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(book)\n    }).then(response => props.updateBookList(response));\n    setTitle(\"\");\n    setAuthor(\"\");\n    setDescription(\"\");\n  };\n\n  const deleteBook = event => {\n    event.preventDefault();\n    fetch(\"api/books/\" + props.selectedBook + \"/\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => props.updateBookList(response));\n    setTitle(\"\");\n    setAuthor(\"\");\n    setDescription(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"author\",\n      children: \"Author:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"author\",\n      value: author,\n      onChange: e => setAuthor(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"description\",\n      children: \"Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"description\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => saveNewBook(e),\n      children: \"Save New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: true,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => deleteBook(e),\n      disabled: !props.selectedBook,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookForm, \"xRZum8uBL9wcpaiFPVxFqRjoZEo=\");\n\n_c = BookForm;\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"sources":["D:/Web Projects/React Flask Library/react-flask-library/src/Components/BookForm.js"],"names":["React","useState","BookForm","props","title","setTitle","author","setAuthor","description","setDescription","selectedBook","setSelectedBook","useEffect","fetch","then","response","json","data","setBooks","items","saveNewBook","event","preventDefault","book","method","headers","body","JSON","stringify","updateBookList","deleteBook","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React, { useState } from 'react';\r\n\r\nconst BookForm = (props) => {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [author, setAuthor] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [selectedBook, setSelectedBook] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/books/\").then(response => response.json()).then(data => {\r\n            setBooks(data.items)\r\n        })\r\n      }, []);\r\n    setSelectedBook(props.selectedBook)\r\n\r\n    const saveNewBook = (event) => { \r\n        event.preventDefault()\r\n        const book = { title, author, description }\r\n\r\n        fetch(\"api/books/\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(book)\r\n        })\r\n        .then((response) => props.updateBookList(response))\r\n\r\n        setTitle(\"\")\r\n        setAuthor(\"\")\r\n        setDescription(\"\")\r\n    }\r\n\r\n    const deleteBook = (event) => {\r\n        event.preventDefault()\r\n\r\n        fetch(\"api/books/\" + props.selectedBook + \"/\", {\r\n            method: \"DELETE\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n        })\r\n        .then((response) => props.updateBookList(response))\r\n\r\n        setTitle(\"\")\r\n        setAuthor(\"\")\r\n        setDescription(\"\")\r\n    }\r\n\r\n  return (\r\n        <form>\r\n            <label htmlFor=\"title\">Title:</label>\r\n            <input\r\n                type=\"text\" \r\n                id=\"title\" \r\n                value={title} \r\n                onChange={(e)=>setTitle(e.target.value)}\r\n            />\r\n\r\n            <label htmlFor=\"author\">Author:</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"author\"\r\n                value={author}\r\n                onChange={(e)=>setAuthor(e.target.value)}\r\n            />\r\n\r\n            <label htmlFor=\"description\">Description:</label>\r\n            <textarea\r\n                id=\"description\"\r\n                value={description}\r\n                onChange={(e)=>setDescription(e.target.value)}\r\n            />\r\n\r\n            <button onClick={(e) => saveNewBook(e)}>Save New</button>\r\n            <button type=\"submit\" disabled={true}>Save</button>\r\n            <button onClick={(e) => deleteBook(e)} disabled={!props.selectedBook}>Delete</button>\r\n        </form>   \r\n    )\r\n}\r\n\r\nexport default BookForm;"]},"metadata":{},"sourceType":"module"}