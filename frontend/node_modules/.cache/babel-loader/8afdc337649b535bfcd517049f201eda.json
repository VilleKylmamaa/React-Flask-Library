{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Projects\\\\React Flask Library\\\\react-flask-library\\\\src\\\\Components\\\\BookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookForm = props => {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [selectedBook, setSelectedBook] = useState(null);\n  useEffect(function meme() {\n    if (props.selectedBook && props.selectedBook !== selectedBook) {\n      setSelectedBook(props.selectedBook);\n      setTitle(props.selectedBook.title);\n      setAuthor(props.selectedBook.author);\n      setDescription(props.selectedBook.description);\n      setErrorMessage(\"\");\n    }\n  });\n\n  const clearForm = () => {\n    setTitle(\"\");\n    setAuthor(\"\");\n    setDescription(\"\");\n  };\n\n  const validateForm = () => {\n    if (title !== \"\" && author !== \"\" && description !== \"\") {\n      return true;\n    } else {\n      setErrorMessage(\"Error: Missing fields\");\n      return false;\n    }\n  };\n\n  const saveNewBook = event => {\n    event.preventDefault();\n\n    if (validateForm()) {\n      const book = {\n        title,\n        author,\n        description\n      };\n      fetch(\"api/books/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(book)\n      }).then(response => props.updateBookList(response));\n      clearForm();\n    }\n  };\n\n  const updateBook = event => {\n    event.preventDefault();\n\n    if (validateForm()) {\n      const book = {\n        title,\n        author,\n        description\n      };\n      fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(book)\n      }).then(response => props.updateBookList(response));\n      clearForm();\n    }\n  };\n\n  const deleteBook = event => {\n    event.preventDefault();\n    fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => props.updateBookList(response));\n    clearForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      value: title,\n      onChange: e => {\n        setTitle(e.target.value);\n        setErrorMessage(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"author\",\n      children: \"Author:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"author\",\n      value: author,\n      onChange: e => {\n        setAuthor(e.target.value);\n        setErrorMessage(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"description\",\n      children: \"Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"description\",\n      value: description,\n      onChange: e => {\n        setDescription(e.target.value);\n        setErrorMessage(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => saveNewBook(e),\n      children: \"Save New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => updateBook(e),\n      disabled: !props.selectedBook,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => deleteBook(e),\n      disabled: !props.selectedBook,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMessage\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookForm, \"4MWY1p+YNzSx5/eggDyibiPzYF0=\");\n\n_c = BookForm;\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"sources":["D:/Web Projects/React Flask Library/react-flask-library/src/Components/BookForm.js"],"names":["React","useState","useEffect","BookForm","props","title","setTitle","author","setAuthor","description","setDescription","errorMessage","setErrorMessage","selectedBook","setSelectedBook","meme","clearForm","validateForm","saveNewBook","event","preventDefault","book","fetch","method","headers","body","JSON","stringify","then","response","updateBookList","updateBook","book_id","deleteBook","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst BookForm = (props) => {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [author, setAuthor] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    const [selectedBook, setSelectedBook] = useState(null)\r\n\r\n    useEffect(function meme() {\r\n        if (props.selectedBook && props.selectedBook !== selectedBook) {\r\n            setSelectedBook(props.selectedBook)\r\n            setTitle(props.selectedBook.title)\r\n            setAuthor(props.selectedBook.author)\r\n            setDescription(props.selectedBook.description)\r\n            setErrorMessage(\"\")\r\n        }\r\n    });\r\n\r\n    const clearForm = () => {\r\n        setTitle(\"\")\r\n        setAuthor(\"\")\r\n        setDescription(\"\")\r\n    }\r\n\r\n    const validateForm = () => {\r\n        if (title !== \"\" && author !== \"\" && description !== \"\") {\r\n            return true\r\n        } else {\r\n            setErrorMessage(\"Error: Missing fields\")\r\n            return false\r\n        }\r\n    }\r\n\r\n    const saveNewBook = (event) => { \r\n        event.preventDefault()\r\n        if (validateForm()) {\r\n            const book = { title, author, description }\r\n            fetch(\"api/books/\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(book)\r\n            })\r\n            .then((response) => props.updateBookList(response))\r\n            clearForm()\r\n        }\r\n    }\r\n\r\n    const updateBook = (event) => { \r\n        event.preventDefault()\r\n        if (validateForm()) {\r\n            const book = { title, author, description }\r\n            fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\r\n                method: \"PUT\",\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(book)\r\n            })\r\n            .then((response) => props.updateBookList(response))\r\n            clearForm()\r\n        }\r\n    }\r\n\r\n    const deleteBook = (event) => {\r\n        event.preventDefault()\r\n\r\n        fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\r\n            method: \"DELETE\",\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n        })\r\n        .then((response) => props.updateBookList(response))\r\n\r\n        clearForm()\r\n    }\r\n\r\n  return (\r\n        <form>\r\n            <label htmlFor=\"title\">Title:</label>\r\n            <input\r\n                type=\"text\" \r\n                id=\"title\" \r\n                value={title} \r\n                onChange={(e)=>{setTitle(e.target.value);\r\n                    setErrorMessage(\"\")}\r\n                }\r\n            />\r\n\r\n            <label htmlFor=\"author\">Author:</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"author\"\r\n                value={author}\r\n                onChange={(e)=>{setAuthor(e.target.value);\r\n                    setErrorMessage(\"\")}\r\n                }\r\n            />\r\n\r\n            <label htmlFor=\"description\">Description:</label>\r\n            <textarea\r\n                id=\"description\"\r\n                value={description}\r\n                onChange={(e)=>{setDescription(e.target.value);\r\n                    setErrorMessage(\"\")}\r\n                }\r\n            />\r\n\r\n            <button onClick={(e) => saveNewBook(e)}>\r\n                    Save New\r\n            </button>\r\n\r\n            <button onClick={(e) => updateBook(e)}\r\n                    disabled={!props.selectedBook}>\r\n                    Save\r\n            </button>\r\n\r\n            <button onClick={(e) => deleteBook(e)}\r\n                    disabled={!props.selectedBook}>\r\n                    Delete\r\n            </button>\r\n\r\n            <p className=\"errorMessage\">{errorMessage}</p>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default BookForm;"]},"metadata":{},"sourceType":"module"}