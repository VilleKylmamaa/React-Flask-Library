{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Projects\\\\React Flask Library\\\\react-flask-library\\\\src\\\\Components\\\\BookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookForm = props => {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [previousSelectedBook, setPreviousSelectedBook] = useState(null);\n\n  if (props.selectedBook && props.selectedBook !== previousSelectedBook) {\n    setPreviousSelectedBook(props.selectedBook);\n    setTitle(props.selectedBook.title);\n    setAuthor(props.selectedBook.author);\n    setDescription(props.selectedBook.description);\n    setErrorMessage(\"\");\n  }\n\n  const clearForm = () => {\n    setTitle(\"\");\n    setAuthor(\"\");\n    setDescription(\"\");\n  };\n\n  const validateForm = () => {\n    if (title !== \"\" && author !== \"\" && description !== \"\") {\n      return true;\n    } else {\n      setErrorMessage(\"Error: Missing fields\");\n      return false;\n    }\n  };\n\n  const saveNewBook = event => {\n    event.preventDefault();\n\n    if (validateForm()) {\n      const book = {\n        title,\n        author,\n        description\n      };\n      fetch(\"api/books/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(book)\n      }).then(response => props.callUpdateBookList(response));\n      clearForm();\n      props.callSetSelectedBook(null);\n    }\n  };\n\n  const updateBook = event => {\n    event.preventDefault();\n\n    if (validateForm()) {\n      const book = {\n        title,\n        author,\n        description\n      };\n      fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(book)\n      }).then(response => props.callUpdateBookList(response));\n    }\n  };\n\n  const deleteBook = event => {\n    event.preventDefault();\n    fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => props.callUpdateBookList(response));\n    clearForm();\n    props.callSetSelectedBook(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      value: title,\n      onChange: e => {\n        setTitle(e.target.value);\n        setErrorMessage(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"author\",\n      children: \"Author:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"author\",\n      value: author,\n      onChange: e => {\n        setAuthor(e.target.value);\n        setErrorMessage(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"description\",\n      children: \"Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"description\",\n      value: description,\n      onChange: e => {\n        setDescription(e.target.value);\n        setErrorMessage(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => saveNewBook(e),\n      children: \"Save New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => updateBook(e),\n      disabled: !props.selectedBook,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => deleteBook(e),\n      disabled: !props.selectedBook,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMessage\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookForm, \"A11wNDPGcBqofYYBevD807f/P2s=\");\n\n_c = BookForm;\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"sources":["D:/Web Projects/React Flask Library/react-flask-library/src/Components/BookForm.js"],"names":["React","useState","BookForm","props","title","setTitle","author","setAuthor","description","setDescription","errorMessage","setErrorMessage","previousSelectedBook","setPreviousSelectedBook","selectedBook","clearForm","validateForm","saveNewBook","event","preventDefault","book","fetch","method","headers","body","JSON","stringify","then","response","callUpdateBookList","callSetSelectedBook","updateBook","book_id","deleteBook","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst BookForm = (props) => {\r\n  const [title, setTitle] = useState(\"\")\r\n  const [author, setAuthor] = useState(\"\")\r\n  const [description, setDescription] = useState(\"\")\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [previousSelectedBook, setPreviousSelectedBook] = useState(null)\r\n\r\n  if (props.selectedBook && (props.selectedBook !== previousSelectedBook)) {\r\n    setPreviousSelectedBook(props.selectedBook)\r\n    setTitle(props.selectedBook.title)\r\n    setAuthor(props.selectedBook.author)\r\n    setDescription(props.selectedBook.description)\r\n    setErrorMessage(\"\")\r\n  }\r\n\r\n  const clearForm = () => {\r\n    setTitle(\"\")\r\n    setAuthor(\"\")\r\n    setDescription(\"\")\r\n  }\r\n\r\n  const validateForm = () => {\r\n    if (title !== \"\" && author !== \"\" && description !== \"\") {\r\n      return true\r\n    } else {\r\n      setErrorMessage(\"Error: Missing fields\")\r\n      return false\r\n    }\r\n  }\r\n\r\n  const saveNewBook = (event) => { \r\n    event.preventDefault()\r\n    if (validateForm()) {\r\n      const book = { title, author, description }\r\n      fetch(\"api/books/\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\"},\r\n        body: JSON.stringify(book)\r\n      })\r\n      .then((response) => props.callUpdateBookList(response))\r\n      clearForm()\r\n      props.callSetSelectedBook(null)\r\n    }\r\n  }\r\n\r\n  const updateBook = (event) => { \r\n    event.preventDefault()\r\n    if (validateForm()) {\r\n      const book = { title, author, description }\r\n      fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\"},\r\n        body: JSON.stringify(book)\r\n      })\r\n      .then((response) => props.callUpdateBookList(response))\r\n    }\r\n  }\r\n\r\n  const deleteBook = (event) => {\r\n    event.preventDefault()\r\n\r\n    fetch(\"api/books/\" + props.selectedBook.book_id + \"/\", {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\"},\r\n    })\r\n    .then((response) => props.callUpdateBookList(response))\r\n    clearForm()\r\n    props.callSetSelectedBook(null)\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"title\">Title:</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"title\"\r\n        value={title}\r\n        onChange={(e)=>{setTitle(e.target.value);\r\n          setErrorMessage(\"\")}\r\n        }\r\n      />\r\n\r\n      <label htmlFor=\"author\">Author:</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"author\"\r\n        value={author}\r\n        onChange={(e)=>{setAuthor(e.target.value);\r\n          setErrorMessage(\"\")}\r\n        }\r\n      />\r\n\r\n      <label htmlFor=\"description\">Description:</label>\r\n      <textarea\r\n        id=\"description\"\r\n        value={description}\r\n        onChange={(e)=>{setDescription(e.target.value);\r\n          setErrorMessage(\"\")}\r\n        }\r\n      />\r\n\r\n      <button onClick={(e) => saveNewBook(e)}>\r\n          Save New</button>\r\n\r\n      <button onClick={(e) => updateBook(e)}\r\n          disabled={!props.selectedBook}>\r\n          Save</button>\r\n\r\n      <button onClick={(e) => deleteBook(e)}\r\n          disabled={!props.selectedBook}>\r\n          Delete</button>\r\n\r\n      <p className=\"errorMessage\">{errorMessage}</p>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default BookForm;"]},"metadata":{},"sourceType":"module"}